[
  {
    "metadata": {
      "title": "Git 개념과 사용법",
      "slug": "git-simple-concept",
      "thumbnail": "/mdx-images/git/bg-git.jpg",
      "description": "Git을 처음 다루는 취준생 및 신입 개발자를 위한 개념, 명령어 정리\n",
      "category": "Git",
      "tags": [
        "Git",
        "Github"
      ],
      "published": "2025-09-02"
    },
    "content": "## Git?Git은 파일의 변경 사항을 추적하고 여러 명의 사용자 간 작업을 효율적으로 수행하기 위한 **스냅샷** 스트림 기반의 버전 관리 시스템입니다각 **커밋** 시점에서의 전체 **스냅샷**을 저장하고 커밋들은 시간순으로 연결되어 스냅샵 스트림을 형성하게 됩니다.## Git의 무결성Git은 데이터를 저장할 때 항상 체크섬을 생성해 그 **체크섬**을 기반으로 프로젝트를 관리합니다.**SHA-1** 해시를 사용하고 파일의 내용 및 디렉터리 구조를 이용해 체크섬을 생성하게 됩니다.## Git 상태(중요)Git에서는 파일들을 _untracked_, _Modified_, _Staged_, _Committed_ 이렇게 4가지의 주요 상태들로 관리합니다.git init(untracked) -> 파일 수정(modified) -> add(staged) -> commit(committed)- Untracked : Git이 추적하지 않는 새 파일- Modified : 수정한 파일이 아직 로컬 저장소에 저장(commit)되지 않은 것을 의미- Staged : 현재 수정한 파일이 곧 커밋할 것이라고 표시(add)해 놓은 상태를 의미- Committed : 데이터가 로컬 저장소에 저장(commit)됐다는 것을 의미## Git 간단하게 시작하기작업 폴더에서 **git init**을 수행하거나 다른 저장소의 **clone**을 받은 경우 .git이라는 폴더가 생성됩니다..git 폴더는 Git 저장소의 모든 메타데이터와 객체 데이터베이스가 저장되는 디렉토리로 프로젝트의 전체 버전 관리 정보를 담고 있는 Git의 핵심 저장소입니다.여러분들의 작업 폴더(root)에 .git 폴더가 생성되었으면 Git 명령어들을 통해 파일들을 관리할 수 있게됩니다.`git add .` 명령어를 이용해 Modified 상태의 파일들을 모두 Staged 상태로 옮길 수 있습니다.`git commit -m \"커밋 메세지\"` 명령어를 통해 Staged 상태를 Commited 상태로 만듭니다 (스냅샵 생성)## Branch?![Git branch image](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiVsirC1iUZWOmt8Fo-pAdgGX94rhiycaZMw05FURMvYE9VrlSWhtV1xq6OotVOcc-2mYGcHEL1iJYrUr1FsbySHIpkVH_SkQF9I3-Bbbjap0p-8EnBTNKcfQbTMaLhVFui7JxeiO4trI0/s1600/git_branching_simple.png)여러명에서 개발을 하다보면 어떤 개발자는 버그를 수정하고, 어떤 개발자는 새로운 기능을 개발하는 서로 다른 작업을 하다보면 각각 서로 다른 버전의 코드가 만들어 지게됩니다.이럴 때 여러 개발자가 동시에 다른 작업을 할 수 있게 만들어주는 기능이 **브랜치**(branch)입니다.각자 독립된 작업영역안에서 소스코드를 작성하고 변경/추가된 내용을 원래의 버전과 비교/병합하여 하나의 새로운 버전으로 만들어 낼 수 있습니다.### 브랜치 생성```bash# 새 브랜치 생성 (생성만, 전환하지 않음)git branch feature-login# 브랜치 생성과 동시에 전환git checkout -b feature-login# 또는git switch -c feature-login```### 현재 위치한 브랜치 전환```bash# 브랜치 전환git checkout feature-login# 또는git switch feature-login```### 브랜치 관리 명령어```bash# 브랜치 목록 확인git branch# 원격 브랜치 포함 모든 브랜치 확인git branch -a# 브랜치 삭제 (안전한 삭제)git branch -d feature-name# 브랜치 강제 삭제git branch -D feature-name# 브랜치 이름 변경git branch -m old-name new-name```## Git과 GitHubGit은 버전 관리 도구이고, GitHub은 Git 저장소를 호스팅하는 클라우드 서비스입니다.- Git : 개발자의 컴퓨터에 설치되어 로컬에서 파일의 변경 이력을 추적하고 관리합니다.- GitHub : Git 저장소를 인터넷 상에 저장하고 공유할 수 있게 해주는 서비스입니다, 개발자가 로컬에서 Git으로 관리하던 프로젝트를 GitHub에 업로드하면, 다른 개발자들과 협업하거나 코드를 공유할 수 있게 됩니다.## 원격 저장소?원격 저장소(Remote Repository)는 네트워크상의 다른 위치에 존재하는 Git 저장소를 의미합니다. 여러 개발자가 동일한 프로젝트에서 협업할 수 있게 해주는 Git의 핵심 기능 중 하나입니다.단순히 말하면 다른 곳에 위치한 Git 저장소입니다(예시)- 개인 서버: 개발자가 직접 운영하는 서버- 회사 내부 서버: 팀 또는 조직이 관리하는 서버- 클라우드 호스팅 서비스: GitHub, GitLab, Bitbucket 등## 원격 저장소 관련 Git명령어### git remotegit remote 명령어는 다른 저장소에 대한 연결을 생성, 조회, 삭제하는 인터페이스입니다.```bash# 원격 저장소 추가git remote add origin https://github.com/username/repository.git# 원격 저장소 목록 확인git remote -v# 원격 저장소 이름 변경git remote rename old-name new-name# 원격 저장소 제거git remote rm origin```### 네트워크 관련 Git명령어- git clone : git clone으로 저장소를 복제하면 자동으로 복제된 저장소를 가리키는 origin이라는 원격 연결을 생성합니다.- git fetch : 원격 저장소에서 데이터를 가져오지만 자동으로 병합하지 않습니다. (사용성 관점에서는 새로고침이라 생각해도 무방합니다)- git pull : 원격 저장소에서 데이터를 가져와 현재 브랜치에 자동으로 병합합니다. (git fetch + git merge)- git push : 로컬 변경사항을 원격 저장소에 업로드합니다.## 정리### 일상적인 개발 Case```bash# 1. 최신 상태로 동기화git pull origin main# 다른 팀원들의 최신 작업 내용 가져오기# 2. 새 기능 브랜치 생성git checkout -b feature/user-login# 독립적인 작업 공간 생성# 3. 개발 작업# 파일 수정...git add .git commit -m \"~기능 개발함\"git commit -m \"~버그 수정함\"# 로컬에서 점진적으로 커밋 생성# 4. 원격에 브랜치 업로드git push origin feature/user-login# 팀원들과 작업 내용 공유# 5. GitHub에서 Pull Request 생성 (웹 인터페이스)# 코드 리뷰# 6. 메인 브랜치에 병합 후 정리git checkout maingit pull origin main          # 병합된 최신 상태 가져오기git branch -d feature/user-login    # 로컬 브랜치 삭제```### 새 프로젝트 생성 Case```bash# 1. 로컬 Git 저장소 초기화git init# 결과: .git 폴더 생성, 아직 커밋이나 원격 저장소 없음# 2. 프로젝트 파일 생성 및 첫 커밋echo \"# My Project\" > README.mdgit add README.mdgit commit -m \"Initial commit\"# 결과: 로컬에 첫 번째 스냅샷 생성# 3. GitHub에서 빈 저장소 생성 후 원격 저장소 연결git remote add origin https://github.com/username/my-project.git# 결과: 로컬 저장소와 원격 저장소 연결# 4. 로컬 커밋을 원격 저장소에 업로드git push -u origin main# 결과: 로컬의 모든 커밋이 GitHub에 업로드됨```### 기존 프로젝트 참여 Case```bash# 1. 원격 저장소를 로컬로 복제git clone https://github.com/username/existing-project.git# 결과: 전체 프로젝트와 히스토리가 로컬에 복사됨# origin 원격 저장소가 자동으로 설정됨# 2. 로컬에서 작업cd existing-projectecho \"새로운 기능\" > feature.jsgit add feature.jsgit commit -m \"Add new feature\"# 결과: 로컬에만 새 커밋 생성# 3. 원격 저장소에서 최신 변경사항 가져오기git pull origin main# 결과: 다른 개발자의 변경사항과 자동 병합# 4. 로컬 변경사항을 원격에 업로드git push origin main# 결과: 새 커밋이 원격 저장소에 반영됨```"
  }
]