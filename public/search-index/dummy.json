[
  {
    "title": "React 18의 새로운 기능들",
    "slug": "react-18-new-features",
    "description": "React 18에서 도입된 Concurrent Features와 Suspense의 개선사항을 살펴봅니다.",
    "date": "2024-03-15",
    "tags": ["react", "javascript", "frontend"],
    "content": "React 18에서는 Concurrent Rendering이 기본적으로 활성화되었습니다. 이를 통해 사용자 인터페이스의 반응성이 크게 향상되었고, Suspense의 기능도 확장되었습니다. useTransition과 useDeferredValue 같은 새로운 훅들이 추가되어 성능 최적화가 더욱 쉬워졌습니다."
  },
  {
    "title": "TypeScript 고급 타입 활용법",
    "slug": "typescript-advanced-types",
    "description": "TypeScript의 고급 타입 시스템을 활용하여 더 안전하고 표현력 있는 코드를 작성하는 방법을 알아봅니다.",
    "date": "2024-03-10",
    "tags": ["typescript", "javascript", "types"],
    "content": "TypeScript의 고급 타입 시스템은 매우 강력합니다. Conditional Types, Mapped Types, Template Literal Types 등을 활용하면 런타임 에러를 컴파일 타임에 잡아낼 수 있습니다. 특히 Generic Constraints와 함께 사용하면 더욱 정교한 타입 체크가 가능합니다."
  },
  {
    "title": "Next.js App Router 완벽 가이드",
    "slug": "nextjs-app-router-guide",
    "description": "Next.js 13의 App Router를 사용하여 현대적인 웹 애플리케이션을 구축하는 방법을 단계별로 설명합니다.",
    "date": "2024-03-08",
    "tags": ["nextjs", "react", "routing", "ssr"],
    "content": "Next.js App Router는 기존 Pages Router의 한계를 극복한 새로운 라우팅 시스템입니다. 파일 시스템 기반 라우팅을 유지하면서도 더 유연한 레이아웃 구성이 가능하며, Server Components와의 통합으로 성능이 크게 향상되었습니다."
  },
  {
    "title": "CSS Grid vs Flexbox 비교 분석",
    "slug": "css-grid-vs-flexbox",
    "description": "CSS Grid와 Flexbox의 특징을 비교하고 각각 언제 사용해야 하는지 실제 예제와 함께 알아봅니다.",
    "date": "2024-03-05",
    "tags": ["css", "layout", "grid", "flexbox"],
    "content": "CSS Grid는 2차원 레이아웃에 최적화되어 있고, Flexbox는 1차원 레이아웃에 적합합니다. Grid는 복잡한 레이아웃 구성에 유리하며, Flexbox는 컴포넌트 내부의 요소 정렬에 더 효과적입니다. 실제로는 두 기술을 조합하여 사용하는 것이 가장 효율적입니다."
  },
  {
    "title": "React Query로 서버 상태 관리하기",
    "slug": "react-query-server-state",
    "description": "React Query(TanStack Query)를 사용하여 서버 상태를 효율적으로 관리하는 방법과 최적화 기법을 소개합니다.",
    "date": "2024-03-01",
    "tags": ["react", "react-query", "state-management", "api"],
    "content": "React Query는 서버 상태 관리를 위한 강력한 라이브러리입니다. 캐싱, 백그라운드 업데이트, 낙관적 업데이트 등의 기능을 제공하여 사용자 경험을 크게 향상시킵니다. useQuery와 useMutation을 적절히 활용하면 복잡한 비동기 로직도 간단하게 처리할 수 있습니다."
  },
  {
    "title": "웹 성능 최적화 체크리스트",
    "slug": "web-performance-optimization",
    "description": "웹 애플리케이션의 성능을 측정하고 개선하기 위한 실용적인 체크리스트와 도구들을 정리했습니다.",
    "date": "2024-02-28",
    "tags": ["performance", "optimization", "web-vitals"],
    "content": "웹 성능 최적화는 사용자 경험에 직접적인 영향을 미칩니다. Core Web Vitals 지표를 중심으로 LCP, FID, CLS를 개선하는 방법을 알아보고, 이미지 최적화, 코드 스플리팅, 트리 쉐이킹 등의 기법을 적용하여 로딩 속도를 향상시킬 수 있습니다."
  }
]
